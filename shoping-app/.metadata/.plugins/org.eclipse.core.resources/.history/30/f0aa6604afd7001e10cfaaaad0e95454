package com.onlineShop.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.onlineShop.Security.service.JwtService;
import com.onlineShop.Security.service.UserInfoService;
import com.onlineShop.controller.entity.AuthRequest;
import com.onlineShop.controller.entity.UserInfo;

import lombok.extern.log4j.Log4j2;

@RestController
@Log4j2
@RequestMapping("/auth")
public class UserController {
    @Autowired
    private UserInfoService userInfoService;
    @Autowired
    private AuthenticationManager authenticationManager;
    @Autowired
    private JwtService jwtService;

    @GetMapping("/welcome")
    public String welcome(){
        return "Welcome to Spring Security tutorials !!";
    }

    @PostMapping("/addUser")
    public String addUser(@RequestBody UserInfo userInfo){
    	 if (userInfo.getPostalCode() == null || userInfo.getPostalCode().isEmpty()) {
             return "Postal code cannot be null or empty";
         }

     
        
        return userInfoService.addUser(userInfo);

    }
    @PostMapping("/login")
    public String login(@RequestBody AuthRequest authRequest){
        try {
            Authentication authenticate = authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(authRequest.getUserName(), authRequest.getPassword()));
            log.info("Authentication successful for user: {}", authRequest.getUserName());
            
            if(authenticate.isAuthenticated()){
                String token = jwtService.generateToken(authRequest.getUserName());
                log.info("Token generated successfully for user: {}", authRequest.getUserName());
                return token;
            } else {
                log.error("Authentication failed for user: {}", authRequest.getUserName());
                throw new UsernameNotFoundException("Invalid user request");
            }
        } catch (AuthenticationException e) {
            log.error("Authentication failed for user: {}. Error: {}", authRequest.getUserName(), e.getMessage());
            throw new UsernameNotFoundException("Invalid credentials");
        }
    }

//    @PostMapping("/login")
//    public String addUser(@RequestBody AuthRequest authRequest){
//        Authentication authenticate = authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(authRequest.getUserName(), authRequest.getPassword()));
//       log.info("+++++++++++++++++++++++"+authRequest.getUserName());
//        if(authenticate.isAuthenticated()){
//            return jwtService.generateToken(authRequest.getUserName());
//        }else {
//            throw new UsernameNotFoundException("Invalid user request");
//        }
//    }
    @GetMapping("/getUsers")
    @PreAuthorize("hasAuthority('USER_ROLES')")
    public List<UserInfo> getAllUsers(){
        return userInfoService.getAllUser();
    }
    @GetMapping("/getUsers/{id}")
    @PreAuthorize("hasAuthority('USER_ROLES')")
    public UserInfo getAllUsers(@PathVariable Integer id){
    	log.info("+++++++++++++++++++"+id);
        return userInfoService.getUser(id);
    }
}
