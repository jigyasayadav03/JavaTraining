package com.onlineShop.security.service;

import java.security.Key;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.function.Function;

import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;

@Component
public class JwtService {
	public static final String SECRET = "5367566B59703373367639792F423F4528482B4D6251655468576D5A71347437";

	public String extractUsername(String token) {
		return extractClaim(token, Claims::getSubject);
	}

	public Date extractExpiration(String token) {
		return extractClaim(token, Claims::getExpiration);
	}

	public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
		final Claims claims = extractAllClaims(token);
		return claimsResolver.apply(claims);
	}

	private Claims extractAllClaims(String token) {
		return Jwts.parserBuilder().setSigningKey(getSignKey()).build().parseClaimsJws(token).getBody();
	}

	private Boolean isTokenExpired(String token) {
		return extractExpiration(token).before(new Date());
	}

	public Boolean validateToken(String token, UserDetails userDetails) {
		final String username = extractUsername(token);
		return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
	}

	public String generateToken(String userName, Set<String> roles) {
		Map<String, Object> claims = new HashMap<>();
		return createToken(claims, userName, roles);
	}

	private String createToken(Map<String, Object> claims, String userName, Set<String> roles) {
		return Jwts.builder().setClaims(claims).setSubject(userName).claim("roles", roles) // Include roles claim
				.setIssuedAt(new Date(System.currentTimeMillis()))
				.setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 30))
				.signWith(getSignKey(), SignatureAlgorithm.HS256).compact();
	}

	private Key getSignKey() {
		byte[] keyBytes = Decoders.BASE64.decode(SECRET);
		return Keys.hmacShaKeyFor(keyBytes);
	}
}

//	public static final String SECRET = "5367566B59703373367639792F423F4528482B4D6251655468576D5A71347437";
//
//	public String extractUsername(String token) {
//		return extractClaim(token, Claims::getSubject);
//	}
//
//	public Date extractExpiration(String token) {
//		return extractClaim(token, Claims::getExpiration);
//	}
//
//	public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
//		final Claims claims = extractAllClaims(token);
//		return claimsResolver.apply(claims);
//	}
//
//	private Claims extractAllClaims(String token) {
//		return Jwts.parserBuilder().setSigningKey(getSignKey()).build().parseClaimsJws(token).getBody();
//	}
//
//	private Boolean isTokenExpired(String token) {
//		return extractExpiration(token).before(new Date());
//	}
//
//	public Boolean validateToken(String token, UserDetails userDetails) {
//		final String username = extractUsername(token);
//		return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
//	}
//	public String generateToken(String username, String password) {
//	    Authentication authentication = authenticationManager.authenticate(
//	            new UsernamePasswordAuthenticationToken(username, password));
//
//	    Object principal = authentication.getPrincipal();
//	    if (principal instanceof UserDetails) {
//	        UserDetails userDetails = (UserDetails) principal;
//	        UserCredential user = getUserByName(userDetails.getUsername());
//	        
//	        // Extract user roles
//	        Set<String> roles = user.getRoles();
//
//	        // Create token claims
//	        Map<String, Object> claims = new HashMap<>();
//	        claims.put("roles", roles); // Add roles to claims
//
//	        return jwtService.createToken(claims, userDetails.getUsername());
//	    } else {
//	        throw new IllegalStateException("Unexpected principal type: " + principal.getClass());
//	    }
//	}
//
//
////	public String generateToken(String userName) {
////		Map<String, Object> claims = new HashMap<>();
////		return createToken(claims, userName);
////	}
//
////	public String createToken(Map<String, Object> claims, String userName) {
////		return Jwts.builder().setClaims(claims).setSubject(userName).setIssuedAt(new Date(System.currentTimeMillis()))
////				.setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 30))
////				.signWith(getSignKey(), SignatureAlgorithm.HS256).compact();
////	}
//
//	private String createToken(Map<String, Object> claims, String userName, Set<String> roles) {
//		return Jwts.builder().setClaims(claims).setSubject(userName).claim("roles", roles) // Include roles claim
//				.setIssuedAt(new Date(System.currentTimeMillis()))
//				.setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 30))
//				.signWith(getSignKey(), SignatureAlgorithm.HS256).compact();
//	}
//
//	private Key getSignKey() {
//		byte[] keyBytes = Decoders.BASE64.decode(SECRET);
//		return Keys.hmacShaKeyFor(keyBytes);
//	}
