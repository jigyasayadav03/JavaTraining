package com.onlineShop.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.onlineShop.model.Cart;
import com.onlineShop.service.CartService;

@RestController
@RequestMapping("/api/carts")
public class CartController {

	private static final Logger logger = LoggerFactory.getLogger(CartController.class);

	@Autowired
	private CartService cartService;

	@PostMapping("/create")
	@PreAuthorize("hasAuthority('USER_ROLES')")
	public ResponseEntity<Cart> createCart(@RequestBody Cart cart) {
		logger.info("Creating cart: {}", cart);
	

		Cart createdCart = cartService.createCart(cart);
		logger.info("Cart created successfully: {}", createdCart);
		return new ResponseEntity<>(createdCart, HttpStatus.CREATED);
	}

	@GetMapping("/{id}")
	@PreAuthorize("hasAuthority('USER_ROLES')")
	public ResponseEntity<Cart> getCartById(@PathVariable Long id) {
		logger.info("Fetching cart with ID: {}", id);
		Cart cart = cartService.getCartById(id);
		if (cart != null) {
			logger.info("Cart found: {}", cart);
			return new ResponseEntity<>(cart, HttpStatus.OK);
		} else {
			logger.warn("Cart with ID {} not found", id);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	@GetMapping("/all")
	@PreAuthorize("hasAuthority('ADMIN_ROLES')")
	public ResponseEntity<List<Cart>> getAllCarts() {
		logger.info("Fetching all carts");
		List<Cart> carts = cartService.getAllCarts();
		logger.info("Fetched {} carts", carts.size());
		return new ResponseEntity<>(carts, HttpStatus.OK);
	}

	@DeleteMapping("/delete/{id}")
	@PreAuthorize("hasAuthority('USER_ROLES')")
	public ResponseEntity<Void> deleteCart(@PathVariable Long id) {
		logger.info("Deleting cart with ID: {}", id);
		cartService.deleteCart(id);
		logger.info("Cart deleted successfully");
		return new ResponseEntity<>(HttpStatus.NO_CONTENT);
	}
}
