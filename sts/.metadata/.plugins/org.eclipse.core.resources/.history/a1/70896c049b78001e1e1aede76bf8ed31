package com.mapping.oneTOmany;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.mapping.oneTOmany.DTO.AddressDTO;
import com.mapping.oneTOmany.DTO.StudenAddressesDTO;
import com.mapping.oneTOmany.service.StudentService;

@RestController
@RequestMapping("/students")
public class StudentController {

	    @Autowired
	    private StudentService studentService;

	    @GetMapping
	    public ResponseEntity<List<Student>> getAllStudents() {
	        List<Student> students = studentService.getAllStudents();
	        return new ResponseEntity<>(students, HttpStatus.OK);
	    }

	    @GetMapping("/{studentId}")
	    public ResponseEntity<Student> getStudentById(@PathVariable int studentId) {
	        Student student = studentService.getStudentById(studentId);
	        if (student != null) {
	            return new ResponseEntity<>(student, HttpStatus.OK);
	        } else {
	            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	        }
	    }

	    @PostMapping
	    public ResponseEntity<Student> createStudent(@RequestBody StudenAddressesDTO studentWithAddresses) {
	        Student student = new Student();
	        student.setName(studentWithAddresses.getName());

	        List<AddressDTO> addressDTOs = studentWithAddresses.getAddresses();
	        if (addressDTOs != null) {
	            List<Address> addresses = addressDTOs.stream()
	                    .map(addressDTO -> {
	                        Address address = new Address();
	                        address.setCity(addressDTO.getCity());
	                        address.setPincode(addressDTO.getPincode());
	                        address.setStudent(student); // Set the student for this address
	                        return address;
	                    })
	                    .collect(Collectors.toList());

	            student.setAddress(addresses);
	        }

	        studentService.save(student);

	        return new ResponseEntity<>(student, HttpStatus.CREATED);
	    }
	}	
	
//	@Autowired
//	private StudentRepository studentRepository;
//
//	@GetMapping
//	public List<Student> getAllStudents() {
//		return studentRepository.findAll();
//	}
//
//	@GetMapping("/{id}")
//	public Student getStudentById(@PathVariable int id) {
//		return studentRepository.findById(id).orElse(null);
//	}
//
//	@PostMapping
//	public Student createStudent(@RequestBody Student student) {
//		return studentRepository.save(student);
//	}
//
//	@PutMapping("/{id}")
//	public Student updateStudent(@PathVariable int id, @RequestBody Student updatedStudent) {
//		return studentRepository.findById(id).map(student -> {
//			student.setName(updatedStudent.getName());
//			return studentRepository.save(student);
//		}).orElse(null);
//	}
//
//	@DeleteMapping("/{id}")
//	public void deleteStudent(@PathVariable int id) {
//		studentRepository.deleteById(id);
//	}
}
